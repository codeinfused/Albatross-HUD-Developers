  |
  local ipairs, pairs, setmetatable, str_gsub,    str_sub,    str_find,    concat,       sort =
        ipairs, pairs, setmetatable, string.gsub, string.sub, string.find, table.concat, table.sort;

  -- ====================================================
  -- ======= GENERAL FUNCTIONS

  function assignFn(target, fn)
    if(type(fn)=='function') then
      target = fn;
    else
      target = function() end;
    end
  end


  Controller = (function()
    local this = {};

    this.new = function(item)
      local out = item or {};
      out.active = (item.active == 'on') and 'on' or 'off'
      out.constructor = 'Controller';
      out.condition = item.condition or function(self)
        return (self.active == 'on');
      end;
	
      setmetatable(out, {__index=this});
      return out;
    end;

    function this:toggle(force)
      if(force == self.active) then return false end;
      if(self.active == 'on' or force == 'off') then
        self.active = 'off';
      elseif(self.active == 'off' or force == 'on') then
        self.active = 'on';
      end
    end

    return this;
  end)();

  Executor = (function()
    local this = {};

    this.new = function()
      local out = {
        store = {},
        events = {}
      };
      setmetatable(out, {__index=this});
      return out;
    end;

    function this:register(index, name, obj, fn)
      local event = {}
      event.index = index;
      event.parent = obj;
      event.exec = fn;
      self.store[name] = event;
      self:orderize();
    end;

    function this:unregister(name)
      self.store[name] = nil;
      self:orderize();
    end;

    function this:orderize()
      while #self.events ~= 0 do rawset(self.events, #self.events, nil) end
      for k,v in pairs(self.store) do
        self.events[#self.events+1] = v;
      end
      sort(self.events, function(a,b) return a.index < b.index end);
    end

    function this:exec()
      for i,event in ipairs(self.events) do
        event.parent[event.exec](event.parent);
      end;
    end;

    return this;
  end)();

  KeyActions = (function()
    local this = {};

    this.store = {}
    this.events = {}

    function this:register(type, action, name, obj, fn)
      local event = {}
      event.type = type;
      event.action = action
      event.parent = obj;
      event.exec = fn;
      self.store[name] = event;
      self:orderize();
    end;

    function this:unregister(name)
      self.store[name] = nil;
      self:orderize();
    end;

    function this:orderize()
      while #self.events ~= 0 do rawset(self.events, #self.events, nil) end
      self.events = {}
      for k,v in pairs(self.store) do
        if( not self.events[v.type] ) then self.events[v.type] = {} end;
        if( not self.events[v.type][v.action] ) then self.events[v.type][v.action] = {} end;
        local ct = #self.events[v.type][v.action]
        self.events[v.type][v.action][ct+1] = v;
      end
    end

    function this:exec(type, action)
      if( not self.events[type] or not self.events[type][action] ) then return end 
      for i,event in ipairs(self.events[type][action]) do
        event.parent[event.exec](event.parent);
      end;
    end;

    return this;
  end)();

  Template = (function()
    local this = {};

    this.new = function(html)
      html = html or "";
      local out = {
        parsed = {},
        data = {},
        index = {},
        pos = 1,
        eos = 0,
        vals = {},
        event = function() end
      };
      setmetatable(out, {__index=this});
      out:compile(html);
      return out;
    end;

    this.minify = function(html)
      return html:
      	gsub("%s%s+", ""):
        gsub("[\t\r\n]+", "");
    end;

    function this:parseNext()
      local s,e = str_find(self.tmpl, "{{%w+}}", self.pos);
      if(s~=nil) then
        self.parsed[#self.parsed+1] = str_sub(self.tmpl, self.pos, s-1);
        self.parsed[#self.parsed+1] = "";
        self.index[str_sub(self.tmpl, s, e):gsub("[{}]", "")] = #self.parsed;
        self.pos = e+1;
      else
        self.parsed[#self.parsed+1] = str_sub(self.tmpl, self.pos, -1);
        self.eos = 1;
      end;
    end;

    function this:compile(html)
      self.tmpl = self.minify(html);
      self.parsed = {};
      self.index = {};
      while self.eos==0 do
        self:parseNext();
      end;
      return self;
    end;

    function this:bind(data)
      self.data = data;
      for k,v in pairs(data) do
        if(self.index[k]~=nil and type(v)~='function') then
          self.parsed[ self.index[k] ] = v;
        end;
      end;
      return self;
    end;

    function this:update()
      for k,v in pairs(self.data) do
        if(self.index[k]~=nil and type(v)=='function') then
          self.parsed[ self.index[k] ] = v();
        end;
      end;
      return self;
    end;

    function this:render()
      self:update();
      self.vals.html = concat(self.parsed);
      self:dispatch();
    end;

    function this:listen(cb)
      self.event = cb;
      return self;
    end;

    function this:dispatch()
      self.event(self.vals);
    end;

    return this;
  end)();

  Flight = Controller.new({
    init = function(self)
      self.pitchInput = 0
      self.rollInput = 0
      self.yawInput = 0
      self.brakeInput = 0

      self.keepCollinearity = 1 -- for easier reading
      self.dontKeepCollinearity = 0 -- for easier reading
      self.tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities
    
      self.pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
      self.yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
      self.rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

      self.brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
      self.brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

      self.autoRoll = true --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
      self.autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

      self.turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
      self.turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

      self.torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

      self.autoNavigationEngineTags = ''
      self.autoNavigationAcceleration = vec3()
      self.autoNavigationUseBrake = false

      KeyActions:register('start', 'forward', 'keyPitchForwardStart', self, keyPitchForwardStart);
      KeyActions:register('stop', 'forward', 'keyPitchForwardStop', self, keyPitchForwardStop);

      KeyActions:register('start', 'backward', 'keyPitchBackwardStart', self, keyPitchBackwardStart);
      KeyActions:register('stop', 'backward', 'keyPitchBackwardStop', self, keyPitchBackwardStop);

      KeyActions:register('start', 'left', 'keyRollLeftStart', self, keyRollLeftStart);
      KeyActions:register('stop', 'left', 'keyRollLeftStop', self, keyRollLeftStop);

      KeyActions:register('start', 'right', 'keyRollRightStart', self, keyRollRightStart);
      KeyActions:register('stop', 'right', 'keyRollRightStop', self, keyRollRightStop);

      KeyActions:register('start', 'yawright', 'keyYawRightStart', self, keyYawRightStart);
      KeyActions:register('stop', 'yawright', 'keyYawRightStop', self, keyYawRightStop);

      KeyActions:register('start', 'yawleft', 'keyYawLeftStart', self, keyYawLeftStart);
      KeyActions:register('stop', 'yawleft', 'keyYawLeftStop', self, keyYawLeftStop);

      KeyActions:register('start', 'up', 'keyLiftUpStart', self, keyLiftUpStart);
      KeyActions:register('stop', 'up', 'keyLiftUpStop', self, keyLiftUpStop);

      KeyActions:register('start', 'down', 'keyLiftDownStart', self, keyLiftDownStart);
      KeyActions:register('stop', 'down', 'keyLiftDownStop', self, keyLiftDownStop);

      KeyActions:register('start', 'brake', 'keyBrakeStart', self, keyBrakeStart);
      KeyActions:register('stop', 'brake', 'keyBrakeStop', self, keyBrakeStop);

      KeyActions:register('start', 'stopengines', 'keyStopEngines', self, keyStopEngines);

      KeyActions:register('stop', 'booster', 'keyBoostersToggle', self, keyBoostersToggle);

      KeyActions:register('loop', 'speedup', 'keySpeedUpLoop', self, keySpeedUpLoop);
      KeyActions:register('loop', 'speeddown', 'keySpeedDownLoop', self, keySpeedDownLoop);


      self:validate();
    end,

    keyPitchForwardStart = function(self) self.pitchInput = self.pitchInput - 1 end,
    keyPitchForwardStop = function(self) self.pitchInput = self.pitchInput + 1 end,

    keyPitchBackwardStart = function(self) self.pitchInput = self.pitchInput + 1 end,
    keyPitchBackwardStop = function(self) self.pitchInput = self.pitchInput - 1 end,

    keyRollLeftStart = function(self) self.rollInput = self.rollInput - 1 end,
    keyRollLeftStop = function(self) self.rollInput = self.rollInput + 1 end,

    keyRollRightStart = function(self) self.rollInput = self.rollInput + 1 end,
    keyRollRightStop = function(self) self.rollInput = self.rollInput - 1 end,

    keyYawRightStart = function(self) self.yawInput = self.yawInput - 1 end,
    keyYawRightStop = function(self) self.yawInput = self.yawInput + 1 end,

    keyYawLeftStart = function(self) self.yawInput = self.yawInput + 1 end,
    keyYawLeftStop = function(self) self.yawInput = self.yawInput - 1 end,

    keyLiftUpStart = function(self) self.liftInput = self.liftInput + 1 end,
    keyLiftUpStop = function(self) self.liftInput = self.liftInput - 1 end,

    keyLiftDownStart = function(self) self.liftInput = self.liftInput - 1 end,
    keyLiftDownStop = function(self) self.liftInput = self.liftInput + 1 end,

    keyBrakeStart = function(self) self.brakeInput = 1 end,
    keyBrakeStop = function(self) self.brakeInput = 0 end,

    keyStopEngines = function(self) Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0) end,

    keyBoostersToggle = function(self) nav:toggleBoosters() end,

    keySpeedUpLoop = function(self) Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, 0.05) end,
    keySpeedDownLoop = function(self) Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, -0.05) end,
  

    update = function(self)
      self.position = vec3(core.getConstructWorldPos());
      self.mass = core.getConstructMass();
      self.imass = core.getConstructIMass();
      self.speed = self.velocity:len();
      self.speedForward = self.velocity:dot( this.real.forward ); -- m/s
      self.speedUp = self.velocity:dot( -this.real.gravityUp ); -- m/s
      self.maxBrakes = core.getMaxKinematicsParametersAlongAxis('brake', vec3(1,0,0));
    end,

    validate = function(self)
      self.pitchSpeedFactor = math.max(self.pitchSpeedFactor, 0.01)
      self.yawSpeedFactor = math.max(self.yawSpeedFactor, 0.01)
      self.rollSpeedFactor = math.max(self.rollSpeedFactor, 0.01)
      self.torqueFactor = math.max(self.torqueFactor, 0.01)
      self.brakeSpeedFactor = math.max(self.brakeSpeedFactor, 0.01)
      self.brakeFlatFactor = math.max(self.brakeFlatFactor, 0.01)
      self.autoRollFactor = math.max(self.autoRollFactor, 0.01)
      self.turnAssistFactor = math.max(self.turnAssistFactor, 0.01)
    end,

    flush = function(self)
      self.up = vec3(core.getConstructWorldOrientationUp());
      self.down = -self.up;
      self.forward = vec3(core.getConstructWorldOrientationForward());
      self.back = -self.forward;
      self.right = vec3(core.getConstructWorldOrientationRight());
      self.left = -self.right;
      self.gravity = core.g();
      self.gravityDirection = vec3(core.getWorldGravity());
      self.worldVertical = vec3(core.getWorldVertical());
      self.atmoDensity = unit.getAtmosphereDensity();
      self.closestInfluence = unit.getClosestPlanetInfluence();
      self.velocity = vec3(core.getWorldVelocity());
      self.velocityDirection = self.velocity:normalize();
      self.acceleration = vec3(core.getWorldAcceleration());
    end,

    rotation = function(self)
      self.currentRollDeg = getRoll(self.worldVertical, self.forward, self.right);
      self.currentRollDegAbs = math.abs(self.currentRollDeg);
      self.currentRollDegSign = utils.sign(self.currentRollDeg);

      self.constructAngularVelocity = vec3(core.getWorldAngularVelocity())
      self.targetAngularVelocity = self.finalPitchInput * self.pitchSpeedFactor * self.right
                                  + self.finalRollInput * self.rollSpeedFactor * self.forward
                                  + self.finalYawInput * self.yawSpeedFactor * self.up;
    
      if self.worldVertical:len() > 0.01 and self.atmoDensity > 0.0 then
        self.autoRollRollThreshold = 1.0
        -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
        if self.autoRoll == true and self.currentRollDegAbs > self.autoRollRollThreshold and self.finalRollInput == 0 then
          self.targetRollDeg = utils.clamp(0,self.currentRollDegAbs-30, self.currentRollDegAbs+30);  -- we go back to 0 within a certain limit
          if (self.rollPID == nil) then
            self.rollPID = pid.new(self.autoRollFactor * 0.01, 0, self.autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
          end
          self.rollPID:inject(self.targetRollDeg - self.currentRollDeg)
          self.autoRollInput = self.rollPID:get()

          self.targetAngularVelocity = self.targetAngularVelocity + self.autoRollInput * self.forward
        end
        self.turnAssistRollThreshold = 20.0
        -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
        if self.turnAssist == true and self.currentRollDegAbs > self.turnAssistRollThreshold and self.finalPitchInput == 0 and self.finalYawInput == 0 then
          self.rollToPitchFactor = self.turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
          self.rollToYawFactor = self.turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

          -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
          self.rescaleRollDegAbs = ((self.currentRollDegAbs - self.turnAssistRollThreshold) / (180 - self.turnAssistRollThreshold)) * 180
          self.rollVerticalRatio = 0
          if self.rescaleRollDegAbs < 90 then
            self.rollVerticalRatio = self.rescaleRollDegAbs / 90
          elseif self.rescaleRollDegAbs < 180 then
            self.rollVerticalRatio = (180 - self.rescaleRollDegAbs) / 90
          end

          self.rollVerticalRatio = self.rollVerticalRatio * self.rollVerticalRatio

          self.turnAssistYawInput = - self.currentRollDegSign * self.rollToYawFactor * (1.0 - self.rollVerticalRatio)
          self.turnAssistPitchInput = self.rollToPitchFactor * self.rollVerticalRatio

          self.targetAngularVelocity = self.targetAngularVelocity
            + self.turnAssistPitchInput * self.right
            + self.turnAssistYawInput * self.up;
        end
      end

      self.angularAcceleration = self.torqueFactor * (self.targetAngularVelocity - self.constructAngularVelocity)
      self.airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
      self.angularAcceleration = self.angularAcceleration - self.airAcceleration -- Try to compensate air friction
      Nav:setEngineTorqueCommand('torque', self.angularAcceleration, self.keepCollinearity, 'airfoil', '', '', self.tolerancePercentToSkipOtherPriorities)
    end, -- end rotation

    brakes = function(self)
      self.brakeAcceleration = -self.finalBrakeInput * (self.brakeSpeedFactor * self.velocity + self.brakeFlatFactor * self.velocityDir)
      Nav:setEngineForceCommand('brake', self.brakeAcceleration)
    end,

    longitudinal = function(self)
      self.longitudinalEngineTags = 'thrust analog longitudinal'
      self.longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
      if (self.longitudinalCommandType == axisCommandType.byThrottle) then
        self.longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(self.longitudinalEngineTags,axisCommandId.longitudinal)
        Nav:setEngineForceCommand(self.longitudinalEngineTags, longitudinalAcceleration, self.keepCollinearity)
      elseif (self.longitudinalCommandType == axisCommandType.byTargetSpeed) then
        self.longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
        self.autoNavigationEngineTags = self.autoNavigationEngineTags .. ' , ' .. self.longitudinalEngineTags
        self.autoNavigationAcceleration = self.autoNavigationAcceleration + self.longitudinalAcceleration
        if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
          Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
        then
          autoNavigationUseBrake = true
        end
      end
    end,

    lateral = function(self)
      self.lateralStrafeEngineTags = 'thrust analog lateral'
      self.lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
      if (self.lateralCommandType == axisCommandType.byThrottle) then
        self.lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(self.lateralStrafeEngineTags,axisCommandId.lateral)
        Nav:setEngineForceCommand(self.lateralStrafeEngineTags, self.lateralStrafeAcceleration, self.keepCollinearity)
      elseif  (self.lateralCommandType == axisCommandType.byTargetSpeed) then
        self.lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
        self.autoNavigationEngineTags = self.autoNavigationEngineTags .. ' , ' .. self.lateralStrafeEngineTags
        self.autoNavigationAcceleration = self.autoNavigationAcceleration + self.lateralAcceleration
      end
    end,

    vertical = function(self)
      self.verticalStrafeEngineTags = 'thrust analog vertical'
      self.verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
      if (self.verticalCommandType == axisCommandType.byThrottle) then
        self.verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(self.verticalStrafeEngineTags,axisCommandId.vertical)
        Nav:setEngineForceCommand(self.verticalStrafeEngineTags, self.verticalStrafeAcceleration, self.keepCollinearity, 'airfoil', 'ground', '', self.tolerancePercentToSkipOtherPriorities)
      elseif  (self.verticalCommandType == axisCommandType.byTargetSpeed) then
        self.verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
        self.autoNavigationEngineTags = self.autoNavigationEngineTags .. ' , ' .. self.verticalStrafeEngineTags
        self.autoNavigationAcceleration = self.autoNavigationAcceleration + self.verticalAcceleration
      end
    end,

    cruise = function(self)
      if (self.autoNavigationAcceleration:len() > constants.epsilon) then
        if (self.brakeInput ~= 0 or self.autoNavigationUseBrake or math.abs(self.velocityDir:dot(self.forward)) < 0.95)  -- if the velocity is not properly aligned with the forward
        then
          self.autoNavigationEngineTags = self.autoNavigationEngineTags .. ', brake'
        end
        Nav:setEngineForceCommand(self.autoNavigationEngineTags, self.autoNavigationAcceleration, self.dontKeepCollinearity, '', '', '', self.tolerancePercentToSkipOtherPriorities)
      end
    end,

    boosters = function(self)
      -- Rockets
      Nav:setBoosterCommand('rocket_engine')
    end

  });

