##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a Lua configuration from scratch
# Note: Lua code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: Albatross HUD 2.4.4

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    databank:
        class: DatabankUnit
        select: manual

handlers:
    library:
        onStart:
            lua:
                <: ../build/library.start.yml

    unit:
        onTimer(timerId):
            lua: |
                KeyActions:exec('tick', timerId)

        onStart:
            lua:
                <: ../build/unit.start.yml
                
        onStop:
            lua:
                <: ../build/unit.stop.yml

    system:
        onFlush:
            lua: |
                SystemFlush:exec()

        onStart:
            lua: |
                -- placeholder

        onUpdate:
            lua: |
                Nav:update()
                KeyActions:exec('system', 'update')
                collectgarbage("collect")

        onActionStart(action):
            lua: |
                KeyActions:exec('start', action)
        onActionStop(action):
            lua: |
                KeyActions:exec('stop', action)
        onActionLoop(action):
            lua: |
                KeyActions:exec('loop', action)
        onInputText(text):
            lua: |
                Commands:call(text)

    screen_voice:
        onOutputChanged(output):
            lua: |
                Commands:call(output, 'y')
